* core components

1) View - div in web

View 안에는 View를 또 쓸 수 있음
View는 기본적으로 flexbox임 따라서 레이아웃을 만드는데에 사용됨.
flexDirection: column이 default임

2) Text - p in web

텍스트는 Text컴포넌트로 감싸지 않으면 에러발생함.

3) Button - button in web
title : value in web

4) ScrollView - scroll이 가능한 View, 화면밖으로 넘쳐도 스크롤이 가능함.
default는 수직 스크롤이고, 속성값을 통해 변경할 수 있음.

5) FlatList
ScrollView는 화면밖에 있더라도 모두 처음부터 렌더링하기 때문에
View자체가 엄청 길어지게 되면 렌더링최적화에 좋지 않음.
이럴땐 FlatList를 사용함.
FlatList는 오직 필요한 부분만 렌더링하면서 렌더링 최적화를 시켜줌.

스스로닫는 엘리먼트임.

속성
data=배열
renderItem= function, 파라미터로 data속성값을 받아오고
return값이 렌더링되는 각 아이템, key값 넣어줄 필요없음.
단, 각 아이템은 {key: :key, value: :value} 처럼 key프로퍼티를 지니고 있어야함.
혹은 {id: :id, value: :value} 와 같은 형태라면
FlatList에서 keyExtractor prop을 사용 속성값으로 함수를 넣어서 
{(item, index) => item.id} 이런식으로 item의 id프로퍼티를 return 시켜주면
저 id가 key가 됨.

6) TouchableOpacity
어떤 것도 렌더링하지 않지만, 모든 자식 엘리먼트들에게 터치이벤트가 가능하도록 해줌.
그런데 터치이벤트가 발생하면 이 엘리멘트전체에 opacity값을먹음
activeOpacity prop에 값 넣어줌

그 외에도 터치이벤트를 가능하게 해주는 Touchable~~~~ 컴포넌트들은 많음.
ex)
TouchableHighlight: 터치발생 -> underlayColor prop으로 특정색을 활성화
TouchableNativeFeedback: 터치발생 -> 잔물결
TouchableWithoutFeedback: 터치발생 -> 잔물결 발생안함

속성
activeOpacity={opacity값}

7) Modal

Modal의 width와 height의 default값은 디바이스 크기와 같음

속성
visible
animationType

* event

onPress = onClick (in web)

onChangeText (in TextInput) = onChange (in web)
이벤트 핸들러의 파라미터는 TextInput의 value임.

onChange = onChange (in web)

onTouchStart, onTouchEnd

* console.log

터미널 로그에 출력됨.
에러도 터미널 로그에 출력됨.

* style

flex 강의

부모에 쓰이는 속성
flexDirection: row | row-reverse | column | column-reverse

justifyContent
주축 방향을 기준으로 어떻게 정렬할지

alignItems
교차축 방향을 기준으로 어떻게 정렬할지
stretch: 주축의 cross방향으로 자리를 다 차지함.


자식에 쓰이는 속성
flex: 숫자
자식들이 차지하는 주축방향 자리의 비율?

* etc

함수 내에서 return JSX 부분은 네이티브 코드로 변환되고
위에있는 자바스크립트 코드들은 컴파일 되지 않음.



